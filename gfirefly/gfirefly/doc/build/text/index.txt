
dbentrust/dbpool.py
*******************

Created on 2013-5-8

@author: lan (www.9miao.com)

class class dbentrust.dbpool.DBPool

   数据库连接池

   initPool(**kw)

      根据连接配置初始化连接池配置信息


dbentrust/dbutils.py
********************

Created on 2013-8-21

@author: lan (www.9miao.com)

class class dbentrust.dbutils.SQLLiteral(v)

   Protects a string from *sqlquote*.

   >>> sqlquote('NOW()')
   <sql: "'NOW()'">
   >>> sqlquote(SQLLiteral('NOW()'))
   <sql: 'NOW()'>

class class dbentrust.dbutils.SQLParam(value)

   Parameter in SQLQuery.

   >>> q = SQLQuery(["SELECT * FROM test WHERE name=", SQLParam("joe")])
   >>> q
   <sql: "SELECT * FROM test WHERE name='joe'">
   >>> q.query()
   'SELECT * FROM test WHERE name=%s'
   >>> q.values()
   ['joe']

class class dbentrust.dbutils.SQLProducer

   Database

   delete(table, where, using=None, svars=None, _test=False)

      Deletes from *table* with clauses *where* and *using*.

      >>> db = DB(None, {})
      >>> name = 'Joe'
      >>> db.delete('foo', where='name = $name', vars=locals(), _test=True)
      <sql: "DELETE FROM foo WHERE name = 'Joe'">

   insert(tablename, seqname=None, _test=False, **values)

      Inserts *values* into *tablename*. Returns current sequence ID.
      Set *seqname* to the ID if it's not the default, or to *False*
      if there isn't one.

      >>> db = DB(None, {})
      >>> q = db.insert('foo', name='bob', age=2, created=SQLLiteral('NOW()'), _test=True)
      >>> q
      <sql: "INSERT INTO foo (age, name, created) VALUES (2, 'bob', NOW())">
      >>> q.query()
      'INSERT INTO foo (age, name, created) VALUES (%s, %s, NOW())'
      >>> q.values()
      [2, 'bob']

   multiple_insert(tablename, values, seqname=None, _test=False)

      Inserts multiple rows into *tablename*. The *values* must be a
      list of dictioanries,  one for each row to be inserted, each
      with the same set of keys. Returns the list of ids of the
      inserted rows.         Set *seqname* to the ID if it's not the
      default, or to *False* if there isn't one.

      >>> db = DB(None, {})
      >>> db.supports_multiple_insert = True
      >>> values = [{"name": "foo", "email": "foo@example.com"}, {"name": "bar", "email": "bar@example.com"}]
      >>> db.multiple_insert('person', values=values, _test=True)
      <sql: "INSERT INTO person (name, email) VALUES ('foo', 'foo@example.com'), ('bar', 'bar@example.com')">

   query(sql_query, processed=False, svars=None)

      Execute SQL query *sql_query* using dictionary *vars* to
      interpolate it. If *processed=True*, *vars* is a *reparam*-style
      list to use  instead of interpolating.

      >>> db = DB(None, {})
      >>> db.query("SELECT * FROM foo", _test=True)
      <sql: 'SELECT * FROM foo'>
      >>> db.query("SELECT * FROM foo WHERE x = $x", vars=dict(x='f'), _test=True)
      <sql: "SELECT * FROM foo WHERE x = 'f'">
      >>> db.query("SELECT * FROM foo WHERE x = " + sqlquote('f'), _test=True)
      <sql: "SELECT * FROM foo WHERE x = 'f'">

   select(tables, svars=None, what='*', where=None, order=None, group=None, limit=None, offset=None, _test=False)

      Selects *what* from *tables* with clauses *where*, *order*,
      *group*, *limit*, and *offset*. Uses vars to interpolate.
      Otherwise, each clause can be a SQLQuery.

      >>> db = DB(None, {})
      >>> db.select('foo', _test=True)
      <sql: 'SELECT * FROM foo'>
      >>> db.select(['foo', 'bar'], where="foo.bar_id = bar.id", limit=5, _test=True)
      <sql: 'SELECT * FROM foo, bar WHERE foo.bar_id = bar.id LIMIT 5'>

   update(tables, where, svars=None, _test=False, **values)

      Update *tables* with clause *where* (interpolated using *vars*)
      and setting *values*.

      >>> db = DB(None, {})
      >>> name = 'Joseph'
      >>> q = db.update('foo', where='name = $name', name='bob', age=2,
      ...     created=SQLLiteral('NOW()'), vars=locals(), _test=True)
      >>> q
      <sql: "UPDATE foo SET age = 2, name = 'bob', created = NOW() WHERE name = 'Joseph'">
      >>> q.query()
      'UPDATE foo SET age = %s, name = %s, created = NOW() WHERE name = %s'
      >>> q.values()
      [2, 'bob', 'Joseph']

class class dbentrust.dbutils.SQLQuery(items=None)

   You can pass this sort of thing as a clause in any db function.
   Otherwise, you can pass a dictionary to the keyword argument *vars*
   and the function will call reparam for you.

   Internally, consists of *items*, which is a list of strings and
   SQLParams, which get concatenated to produce the actual query.

   static join(items, sep=' ', prefix=None, suffix=None, target=None)

      Joins multiple queries.

      >>> SQLQuery.join(['a', 'b'], ', ')
      <sql: 'a, b'>

      Optinally, prefix and suffix arguments can be provided.

      >>> SQLQuery.join(['a', 'b'], ', ', prefix='(', suffix=')')
      <sql: '(a, b)'>

      If target argument is provided, the items are appended to target
      instead of creating a new SQLQuery.

   query(paramstyle=None)

      Returns the query part of the sql query.
         >>> q = SQLQuery(["SELECT * FROM test WHERE name=", SQLParam('joe')])
         >>> q.query()
         'SELECT * FROM test WHERE name=%s'
         >>> q.query(paramstyle='qmark')
         'SELECT * FROM test WHERE name=?'

   values()

      Returns the values of the parameters used in the sql query.
         >>> q = SQLQuery(["SELECT * FROM test WHERE name=", SQLParam('joe')])
         >>> q.values()
         ['joe']

exception exception dbentrust.dbutils.UnknownParamstyle

   raised for unsupported db paramstyles

   (currently supported: qmark, numeric, format, pyformat)

dbentrust.dbutils.reparam(string_, dictionary)

   Takes a string and a dictionary and interpolates the string using
   values from the dictionary. Returns an *SQLQuery* for the result.

   >>> reparam("s = $s", dict(s=True))
   <sql: "s = 't'">
   >>> reparam("s IN $s", dict(s=[1, 2]))
   <sql: 's IN (1, 2)'>

dbentrust.dbutils.safestr(obj, encoding='utf-8')

   Converts any given object to utf-8 encoded string.

   >>> safestr('hello')
   'hello'
   >>> safestr(u'\u1234')
   '\xe1\x88\xb4'
   >>> safestr(2)
   '2'

dbentrust.dbutils.safeunicode(obj, encoding='utf-8')

   Converts any given object to unicode string.

   >>> safeunicode('hello')
   u'hello'
   >>> safeunicode(2)
   u'2'
   >>> safeunicode('\xe1\x88\xb4')
   u'\u1234'

dbentrust.dbutils.sqlify(obj)

   converts *obj* to its proper SQL version

   >>> sqlify(None)
   'NULL'
   >>> sqlify(True)
   "'t'"
   >>> sqlify(3)
   '3'

dbentrust.dbutils.sqllist(lst)

   Converts the arguments for use in something like a WHERE clause.

   >>> sqllist(['a', 'b'])
   'a, b'
   >>> sqllist('a')
   'a'
   >>> sqllist(u'abc')
   u'abc'

dbentrust.dbutils.sqlparam

   alias of "SQLParam"

dbentrust.dbutils.sqlquote(a)

   Ensures *a* is quoted properly for use in a SQL query.

   >>> 'WHERE x = ' + sqlquote(True) + ' AND y = ' + sqlquote(3)
   <sql: "WHERE x = 't' AND y = 3">
   >>> 'WHERE x = ' + sqlquote(True) + ' AND y IN ' + sqlquote([2, 3])
   <sql: "WHERE x = 't' AND y IN (2, 3)">

dbentrust.dbutils.sqlwhere(dictionary, grouping=' AND ')

   Converts a *dictionary* to an SQL WHERE clause *SQLQuery*.

   >>> sqlwhere({'cust_id': 2, 'order_id':3})
   <sql: 'order_id = 3 AND cust_id = 2'>
   >>> sqlwhere({'cust_id': 2, 'order_id':3}, grouping=', ')
   <sql: 'order_id = 3, cust_id = 2'>
   >>> sqlwhere({'a': 'a', 'b': 'b'}).query()
   'a = %s AND b = %s'


dbentrust/madminanager.py
*************************

Created on 2013-5-22

@author: lan (www.9miao.com)

class class dbentrust.madminanager.MAdminManager

   一个单例管理器。作为所有madmin的管理者

   checkAdmins()

      遍历所有的madmin，与数据库进行同步。

      >>>MAdminManager().checkAdmins()

   dropAdmin(adminname)

      移除一个madmin对象.

      >>> MAdminManager().dropAdmin(madmin)

   getAdmin(adminname)

      根据madmin的名字获取madmin对象

      >>> madmin = MAdminManager().getAdmin('tb_registe')

   registe(admin)

      注册一个madmin对象到管理中.

      >>> madmin = MAdmin('tb_registe','characterId',incrkey='id')
      >>> MAdminManager().registe(madmin)
